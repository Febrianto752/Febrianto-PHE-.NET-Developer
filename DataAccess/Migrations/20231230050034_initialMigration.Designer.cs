// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231230050034_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Account", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NoTelp")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("no_telp");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.HasKey("Guid");

                    b.ToTable("accounts");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("9ff05d8f-8b22-4a88-b52d-27425dfa150e"),
                            CreatedDate = new DateTime(2023, 12, 30, 12, 0, 33, 545, DateTimeKind.Local).AddTicks(9283),
                            Email = "admin@gmail.com",
                            ModifiedDate = new DateTime(2023, 12, 30, 12, 0, 33, 545, DateTimeKind.Local).AddTicks(9298),
                            Name = "Admin",
                            NoTelp = "081236767632",
                            Password = "$2a$12$cr0PbdiSpy3ke5RfKMYF4OFCic.fcJrz2MhPlJxiQMngVSv3jNi2a",
                            Role = "Admin"
                        },
                        new
                        {
                            Guid = new Guid("c38b8bfb-649d-400a-8019-7e06c927414a"),
                            CreatedDate = new DateTime(2023, 12, 30, 12, 0, 34, 35, DateTimeKind.Local).AddTicks(1761),
                            Email = "manager@gmail.com",
                            ModifiedDate = new DateTime(2023, 12, 30, 12, 0, 34, 35, DateTimeKind.Local).AddTicks(1784),
                            Name = "Ria Sutrani",
                            NoTelp = "081236733332",
                            Password = "$2a$12$h5cKZ2E1vBh/e4yFG93Iae9pF/KR7OkLCiXFi/q3Lc4FvEnISKqF2",
                            Role = "Manager"
                        });
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.HasKey("Guid");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("Models.ProjectTender", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("PorjectGuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("project_guid");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("VendorGuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("vendor_guid");

                    b.HasKey("Guid");

                    b.HasIndex("PorjectGuid");

                    b.HasIndex("VendorGuid");

                    b.ToTable("project_tenders");
                });

            modelBuilder.Entity("Models.Vendor", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<Guid>("AccountGuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("account_guid");

                    b.Property<string>("BusinessField")
                        .HasColumnType("longtext")
                        .HasColumnName("business_field");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_date");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("longtext")
                        .HasColumnName("profile_image");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TypeCompany")
                        .HasColumnType("longtext")
                        .HasColumnName("type_company");

                    b.HasKey("Guid");

                    b.HasIndex("AccountGuid");

                    b.ToTable("vendors");
                });

            modelBuilder.Entity("Models.ProjectTender", b =>
                {
                    b.HasOne("Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("PorjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Models.Vendor", b =>
                {
                    b.HasOne("Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
